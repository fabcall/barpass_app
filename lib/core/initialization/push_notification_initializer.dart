import 'dart:developer';
import 'package:barpass_app/core/initialization/base_initializer.dart';
import 'package:barpass_app/core/services/push_notification_service.dart';

/// Inicializador para o servi√ßo de push notifications
///
/// Integra o sistema de notifica√ß√µes com o fluxo de inicializa√ß√£o
/// da aplica√ß√£o
class PushNotificationInitializer extends BaseInitializer {
  @override
  String get name => 'PushNotifications';

  @override
  bool get isCritical => false; // N√£o √© cr√≠tico, app pode funcionar sem

  @override
  Future<InitializerResult> initialize() async {
    try {
      log('üîî Inicializando sistema de push notifications...');

      // Inicializar o servi√ßo
      await PushNotificationService.instance.initialize();

      // Verificar status de autoriza√ß√£o
      final isEnabled = await PushNotificationService.instance
          .areNotificationsEnabled();

      log(
        isEnabled
            ? '‚úÖ Notifica√ß√µes habilitadas'
            : '‚ö†Ô∏è Notifica√ß√µes desabilitadas pelo usu√°rio',
      );

      // Inscrever em t√≥picos padr√£o
      if (isEnabled) {
        await _subscribeToDefaultTopics();
      }

      return InitializerResult(
        metadata: {
          'enabled': isEnabled,
          'fcm_token': PushNotificationService.instance.fcmToken,
          'topics': isEnabled ? ['general', 'promotions'] : <String>[],
        },
      );
    } on Exception catch (error, stackTrace) {
      log('‚ùå Erro ao inicializar push notifications: $error');
      log('Stack trace: $stackTrace');

      // N√£o propagar erro, pois n√£o √© cr√≠tico
      return InitializerResult(
        metadata: {
          'enabled': false,
          'error': error.toString(),
        },
      );
    }
  }

  /// Inscreve o usu√°rio em t√≥picos padr√£o
  Future<void> _subscribeToDefaultTopics() async {
    final service = PushNotificationService.instance;

    // T√≥picos b√°sicos que todos os usu√°rios recebem
    await service.subscribeToTopic('general');
    await service.subscribeToTopic('promotions');

    log('‚úÖ Inscri√ß√£o em t√≥picos padr√£o conclu√≠da');
  }
}
