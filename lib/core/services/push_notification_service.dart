import 'dart:developer';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

/// Servi√ßo centralizado para gerenciamento de push notifications
///
/// Responsabilidades:
/// - Inicializar Firebase Cloud Messaging (FCM)
/// - Gerenciar permiss√µes de notifica√ß√£o
/// - Configurar notifica√ß√µes locais
/// - Lidar com mensagens recebidas (foreground/background)
/// - Gerenciar token do dispositivo
class PushNotificationService {
  PushNotificationService._();

  static final PushNotificationService _instance = PushNotificationService._();
  static PushNotificationService get instance => _instance;

  // --- Firebase Messaging ---
  final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;

  // --- Local Notifications ---
  final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();

  // --- Estado ---
  String? _fcmToken;
  bool _isInitialized = false;

  /// Token FCM do dispositivo atual
  String? get fcmToken => _fcmToken;

  /// Verifica se o servi√ßo foi inicializado
  bool get isInitialized => _isInitialized;

  // --- Channels para Android ---
  static const AndroidNotificationChannel _defaultChannel =
      AndroidNotificationChannel(
        'barpass_default_channel',
        'Notifica√ß√µes Gerais',
        description: 'Notifica√ß√µes gerais do BarPass',
        importance: Importance.high,
        enableVibration: true,
        playSound: true,
      );

  static const AndroidNotificationChannel _promotionsChannel =
      AndroidNotificationChannel(
        'barpass_promotions_channel',
        'Promo√ß√µes',
        description: 'Ofertas e promo√ß√µes especiais',
        importance: Importance.defaultImportance,
        enableVibration: true,
      );

  static const AndroidNotificationChannel _ordersChannel =
      AndroidNotificationChannel(
        'barpass_orders_channel',
        'Pedidos',
        description: 'Atualiza√ß√µes sobre seus pedidos',
        importance: Importance.max,
        enableVibration: true,
        playSound: true,
      );

  /// Inicializa o servi√ßo de notifica√ß√µes
  ///
  /// Deve ser chamado no in√≠cio da aplica√ß√£o, preferencialmente
  /// no AppInitializer
  Future<void> initialize() async {
    if (_isInitialized) {
      log('‚ö†Ô∏è PushNotificationService j√° foi inicializado');
      return;
    }

    try {
      log('üîî Inicializando PushNotificationService...');

      // 1. Solicitar permiss√µes
      final permissionGranted = await _requestPermissions();
      if (!permissionGranted) {
        log('‚ö†Ô∏è Permiss√£o de notifica√ß√µes negada pelo usu√°rio');
        _isInitialized = true; // Marca como inicializado mesmo sem permiss√£o
        return;
      }

      // 2. Configurar notifica√ß√µes locais
      await _setupLocalNotifications();

      // 3. Obter e salvar token FCM
      await _getFCMToken();

      // 4. Configurar handlers de mensagens
      _setupMessageHandlers();

      // 5. Configurar listener de token refresh
      _setupTokenRefreshListener();

      _isInitialized = true;
      log('‚úÖ PushNotificationService inicializado com sucesso');
      log('üì± FCM Token: $_fcmToken');
    } catch (e, stackTrace) {
      log('‚ùå Erro ao inicializar PushNotificationService: $e');
      log('Stack trace: $stackTrace');
      rethrow;
    }
  }

  /// Solicita permiss√µes para notifica√ß√µes
  Future<bool> _requestPermissions() async {
    log('üìã Solicitando permiss√µes de notifica√ß√£o...');

    final settings = await _firebaseMessaging.requestPermission(
      alert: true,
      announcement: false,
      badge: true,
      carPlay: false,
      criticalAlert: false,
      provisional: false,
      sound: true,
    );

    final granted =
        settings.authorizationStatus == AuthorizationStatus.authorized;

    log(
      granted
          ? '‚úÖ Permiss√µes concedidas'
          : '‚ö†Ô∏è Permiss√µes negadas - Status: ${settings.authorizationStatus}',
    );

    return granted;
  }

  /// Configura as notifica√ß√µes locais (Flutter Local Notifications)
  Future<void> _setupLocalNotifications() async {
    log('üîß Configurando notifica√ß√µes locais...');

    // Configura√ß√µes de inicializa√ß√£o para Android
    const androidSettings = AndroidInitializationSettings(
      '@mipmap/ic_launcher',
    );

    // Configura√ß√µes de inicializa√ß√£o para iOS
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: false,
      requestBadgePermission: false,
      requestSoundPermission: false,
    );

    // Configura√ß√µes gerais
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    // Inicializar plugin
    await _localNotifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // Criar canais de notifica√ß√£o no Android
    await _createNotificationChannels();

    log('‚úÖ Notifica√ß√µes locais configuradas');
  }

  /// Cria os canais de notifica√ß√£o no Android
  Future<void> _createNotificationChannels() async {
    final androidPlugin = _localNotifications
        .resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin
        >();

    if (androidPlugin != null) {
      await androidPlugin.createNotificationChannel(_defaultChannel);
      await androidPlugin.createNotificationChannel(_promotionsChannel);
      await androidPlugin.createNotificationChannel(_ordersChannel);

      log('‚úÖ Canais de notifica√ß√£o criados no Android');
    }
  }

  /// Obt√©m o token FCM do dispositivo
  Future<void> _getFCMToken() async {
    try {
      _fcmToken = await _firebaseMessaging.getToken();
      log('üì± FCM Token obtido: $_fcmToken');
    } catch (e) {
      log('‚ùå Erro ao obter FCM Token: $e');
    }
  }

  /// Configura os handlers para mensagens recebidas
  void _setupMessageHandlers() {
    log('üîß Configurando handlers de mensagens...');

    // Mensagens recebidas quando o app est√° em foreground
    FirebaseMessaging.onMessage.listen(_handleForegroundMessage);

    // Mensagens que abriram o app (estava em background)
    FirebaseMessaging.onMessageOpenedApp.listen(_handleMessageOpenedApp);

    // Verificar se o app foi aberto por uma notifica√ß√£o
    _checkInitialMessage();

    log('‚úÖ Handlers de mensagens configurados');
  }

  /// Configura listener para atualiza√ß√£o do token
  void _setupTokenRefreshListener() {
    _firebaseMessaging.onTokenRefresh.listen((newToken) {
      log('üîÑ Token FCM atualizado: $newToken');
      _fcmToken = newToken;
      // TODO: Enviar novo token para o backend
    });
  }

  /// Verifica se o app foi aberto atrav√©s de uma notifica√ß√£o
  Future<void> _checkInitialMessage() async {
    final initialMessage = await _firebaseMessaging.getInitialMessage();
    if (initialMessage != null) {
      log('üì¨ App aberto por notifica√ß√£o: ${initialMessage.messageId}');
      _handleMessageOpenedApp(initialMessage);
    }
  }

  /// Handler para mensagens recebidas em foreground
  Future<void> _handleForegroundMessage(RemoteMessage message) async {
    log('üì® Mensagem recebida em foreground: ${message.messageId}');
    log('T√≠tulo: ${message.notification?.title}');
    log('Corpo: ${message.notification?.body}');
    log('Data: ${message.data}');

    // Mostrar notifica√ß√£o local
    await _showLocalNotification(message);
  }

  /// Handler para quando o usu√°rio toca em uma notifica√ß√£o
  void _handleMessageOpenedApp(RemoteMessage message) {
    log('üëÜ Usu√°rio tocou na notifica√ß√£o: ${message.messageId}');
    log('Data: ${message.data}');

    // TODO: Navegar para a tela apropriada baseado no tipo de notifica√ß√£o
    _handleNotificationNavigation(message.data);
  }

  /// Mostra uma notifica√ß√£o local
  Future<void> _showLocalNotification(RemoteMessage message) async {
    final notification = message.notification;
    final android = message.notification?.android;

    if (notification == null) {
      log('‚ö†Ô∏è Mensagem sem notification payload');
      return;
    }

    // Determinar o canal baseado no tipo de notifica√ß√£o
    final channelId = _getChannelIdForMessage(message);
    final channel = _getChannelById(channelId);

    // Configura√ß√µes para Android
    final androidDetails = AndroidNotificationDetails(
      channel.id,
      channel.name,
      channelDescription: channel.description,
      importance: channel.importance,
      priority: Priority.high,
      icon: android?.smallIcon ?? '@mipmap/ic_launcher',
      enableVibration: channel.enableVibration,
      playSound: channel.playSound,
    );

    // Configura√ß√µes para iOS
    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    // Configura√ß√µes gerais
    final details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    // Mostrar notifica√ß√£o
    await _localNotifications.show(
      message.hashCode,
      notification.title,
      notification.body,
      details,
      payload: message.data.toString(),
    );

    log('‚úÖ Notifica√ß√£o local exibida');
  }

  /// Callback quando o usu√°rio toca em uma notifica√ß√£o local
  void _onNotificationTapped(NotificationResponse response) {
    log('üëÜ Notifica√ß√£o local tocada');
    log('Payload: ${response.payload}');

    // TODO: Extrair dados do payload e navegar
  }

  /// Determina o canal correto baseado nos dados da mensagem
  String _getChannelIdForMessage(RemoteMessage message) {
    final type = message.data['type'] as String?;

    switch (type) {
      case 'promotion':
        return _promotionsChannel.id;
      case 'order':
        return _ordersChannel.id;
      default:
        return _defaultChannel.id;
    }
  }

  /// Obt√©m o canal pelo ID
  AndroidNotificationChannel _getChannelById(String channelId) {
    switch (channelId) {
      case 'barpass_promotions_channel':
        return _promotionsChannel;
      case 'barpass_orders_channel':
        return _ordersChannel;
      default:
        return _defaultChannel;
    }
  }

  /// Lida com a navega√ß√£o baseada nos dados da notifica√ß√£o
  void _handleNotificationNavigation(Map<String, dynamic> data) {
    final type = data['type'] as String?;
    final id = data['id'] as String?;

    log('üß≠ Navegando para tipo: $type, ID: $id');

    // TODO: Implementar navega√ß√£o usando NavigatorKey ou GoRouter
    // Exemplo:
    // switch (type) {
    //   case 'order':
    //     navigatorKey.currentState?.pushNamed('/order/$id');
    //     break;
    //   case 'promotion':
    //     navigatorKey.currentState?.pushNamed('/promotion/$id');
    //     break;
    // }
  }

  // --- M√©todos P√∫blicos ---

  /// Inscreve o dispositivo em um t√≥pico
  Future<void> subscribeToTopic(String topic) async {
    try {
      await _firebaseMessaging.subscribeToTopic(topic);
      log('‚úÖ Inscrito no t√≥pico: $topic');
    } catch (e) {
      log('‚ùå Erro ao inscrever no t√≥pico $topic: $e');
    }
  }

  /// Remove a inscri√ß√£o do dispositivo de um t√≥pico
  Future<void> unsubscribeFromTopic(String topic) async {
    try {
      await _firebaseMessaging.unsubscribeFromTopic(topic);
      log('‚úÖ Desinscri√ß√£o do t√≥pico: $topic');
    } catch (e) {
      log('‚ùå Erro ao desinscrever do t√≥pico $topic: $e');
    }
  }

  /// Obt√©m o status atual de autoriza√ß√£o de notifica√ß√µes
  Future<AuthorizationStatus> getAuthorizationStatus() async {
    final settings = await _firebaseMessaging.getNotificationSettings();
    return settings.authorizationStatus;
  }

  /// Verifica se as notifica√ß√µes est√£o habilitadas
  Future<bool> areNotificationsEnabled() async {
    final status = await getAuthorizationStatus();
    return status == AuthorizationStatus.authorized;
  }

  /// Deleta o token FCM atual
  Future<void> deleteToken() async {
    try {
      await _firebaseMessaging.deleteToken();
      _fcmToken = null;
      log('‚úÖ Token FCM deletado');
    } catch (e) {
      log('‚ùå Erro ao deletar token: $e');
    }
  }

  /// Limpa todas as notifica√ß√µes exibidas
  Future<void> clearAllNotifications() async {
    await _localNotifications.cancelAll();
    log('‚úÖ Todas as notifica√ß√µes foram limpas');
  }

  /// Remove uma notifica√ß√£o espec√≠fica
  Future<void> cancelNotification(int id) async {
    await _localNotifications.cancel(id);
    log('‚úÖ Notifica√ß√£o $id removida');
  }
}

/// Handler para mensagens em background (fun√ß√£o top-level necess√°ria)
///
/// Esta fun√ß√£o √© executada em um isolate separado quando uma mensagem
/// √© recebida enquanto o app est√° em background
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  // IMPORTANTE: N√£o inicialize Firebase aqui se j√° foi inicializado no main
  log('üì® Mensagem recebida em background: ${message.messageId}');
  log('T√≠tulo: ${message.notification?.title}');
  log('Corpo: ${message.notification?.body}');
  log('Data: ${message.data}');

  // Processar a mensagem conforme necess√°rio
  // Por exemplo, atualizar cache local, salvar dados, etc.
}
